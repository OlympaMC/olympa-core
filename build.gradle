// Olympa Core

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    
    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')
    }

    maven {
        url = uri('https://papermc.io/repo/repository/maven-public/')
    }

    maven {
        url = uri('https://repo.viaversion.com')
    }

    maven {
        url = uri('https://jitpack.io')
        content {
        	includeGroup 'com.github.ProtocolSupport'
        }
    }

    maven {
        url = uri('https://oss.sonatype.org/content/repositories/releases')
        content {
        	includeGroup 'redis.clients'
        }
    }

    /*maven {
        url = uri('https://libraries.minecraft.net/)
    }*/
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module("fr.olympa:olympa-api") with project(':olympa-api')
    }
}

dependencies {
    api 'fr.olympa:olympa-api:0.0.1-SNAPSHOT'
	api 'redis.clients:jedis:3.6.0'
    api 'net.ricecode:string-similarity:1.0.0'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.6.2'
    compileOnly 'us.myles:viaversion:3.2.1'
    compileOnly 'com.github.ProtocolSupport:ProtocolSupport:66b494a8dd'
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 8
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

group = 'fr.olympa'
version = '0.0.1-SNAPSHOT'
description = 'olympa-core'
java.sourceCompatibility = JavaVersion.VERSION_11

def fullVersion = version + "-" + getGitBranch() + '-' + getCheckedOutGitCommitHash() + "-" + getDate()

publishing {
    publications {
    	shadow(MavenPublication) { publication ->
      		project.shadow.component(publication)
    	}
    }
}

jar {
	archiveFileName = 'OlympaCore.jar'
	destinationDirectory = file('build')
}

shadowJar{
	archiveFileName = 'OlympaCore.jar'
	destinationDirectory = file('build')
    classifier = null
}

processResources {
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
       "plugin_version": fullVersion
    ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src/java']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
